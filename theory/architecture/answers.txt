Three C functions were mentioned in class for reading data from a file. What are they and how do they differ from one another?

	fprintf/fscanf: fprint prints character data and can be formatted
	fputs/fgets: fputs also prints character data but it just prints the string given without formatting and fgets reads in a line stopping at newline character
	fread/fwrite: fread/fwrite is threadsafe and read in/write to a file from a binary stream stopping after a specified number of bytes


Variables in a program can be allocated on the stack or in the heap. What is the difference between the stack and the heap with respect to persistence of the data (when is memory space reclaimed)?

	 Memory Space in the stack is allocated and freed by the compiler only living for the duration of the current function call, 
	 but heap memory must be manually allocated living until it is explicitly deallocated.

Most modern programming languages have objects but do not have structs. Are modern languages losing any functionality by not have structs? Explain your answer.
	Modern languages aren't losing any functionality by not having structs. Objects are structured data with functions, methods, inheritance, polymorphism etc. 
	An object is basically an instance of a struct that has some behavoir(methods).

C does not have objects though C++ does. Even though C does not have objects, can C be used to implement a program using object-like logic? Explain your answer.
	I think C could be used to implement a program using object like language through using structs with methods that operate on those structs by having struct pointers as parameters it could work.
