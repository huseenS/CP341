1. Three of the pitfalls listed in the text are Race Conditions, Strangled Scaling, and Deadlocks. Briefly describe what each of these pitfalls and how you might detect their presence in your code.

Race Conditions: A  race condition occurs when 2 or more threads operate on the same memory location without proper synchronization. You can detect a race condition like we did in the class example via print statements that aren't executed in order.
DeadLocks: Deadlocks occur when two or more threads try to complete a task but end up unable to make progress waiting for each other--because of the required locks.
Strangled Scaling: Strangled scaling occurs when locks can create unintended/unnecessary bottlenecks as a parallelizable portion of a task ends up serialized.

2. What is load imbalance? On Tuesday we talked a bunch about how we might model parallel performance, 
does load imbalance break/change/complicate reasoning about performance in these models?

Load imbalance is when cores/threads are given an uneven distribution of work to perform. Load imbalance I think can complicate reasoning about perfomance as speedup calculations will differ due to the parralelizable portion of the equation varying. 
Although, in the work-span model it shouldn't be an issue.
 

3. Download hw_race.c and examine the source code. The program should have each thread place its thread id into an array, that is then printed to the user.
 What would you expect the output to look like if there is a race condition? Compile and run hw_race.c until you are able to produce the race condition. 
 Fix the race condition and then commit to your repository (if the solution has strangled scaling, that is fine).
 
 If there was a race condition I'd expect in some cases the array to not properly update the array with corresponding thread numbers leaving a value as the intial -1. 

4. Download hw_deadlock.c and examine the source code. This program can deadlock, how would you know that the deadlock has occurred when running the program?
 Compile and run hw_deadlock.c and notice the deadlock. Fix the deadlock and then commit to your repository 
 (if the solution has strangled scaling, that is fine).
 
 You would know that a deadlock occured while running if the program stalls after only printing a few periods. 
 
 


